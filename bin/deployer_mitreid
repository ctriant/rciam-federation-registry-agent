#!/usr/bin/env python3

import json, time
import argparse
import logging
from common import get_log_conf
from ServiceRegistryAms.PullPublish import PullPublish
from MitreidConnect.MitreidClientApi import mitreidClientApi
from Utils.oauth import refreshTokenGrant

log = logging.getLogger(__name__)

def init_ams_agent(path):
    log.info('Init ams agent')
    with open(path) as json_data_file:
        config = json.load(json_data_file)
    return PullPublish(config)

'''
format_mitreid_msg gets a message from ams rciam-federation in snake_case
and modifies it in camelCase format to be accepted from mitreID
'''
def format_mitreid_msg(msg):
    msgNew = {}
    emails=[]
    for key in msg.keys():
        components = key.split('_')
        new_key = components[0] + ''.join(x.title() for x in components[1:])
        msgNew[new_key] = msg[key]
    for contact in msg['contacts']:
        emails.append(contact['email'])
    msgNew['contacts'] = emails
    msgNew['clientName'] = msgNew.pop('serviceName')
    msgNew['clientDescription'] = msgNew.pop('serviceDescription')
    return msgNew

'''
format_ams_msg gets the response from mitreID in camelCase format, keeps the needed fields
and modifies it in snake_case to be accepted from ams - rciam-federation-recistry
'''
def format_ams_msg(msg, client_id, agent_id, status):
    msgNew = {}
    msgNew['id'] = client_id
    msgNew['client_id'] = msg['clientId']
    msgNew['agent_id'] = agent_id
    if status == True:
        msgNew['state'] = "deployed"
        msgNew['external_id'] = msg['id']
    else:
        msgNew['state'] = "error"
    return  msgNew

'''
This function will gain an access token from the provided issuer and it will
make a POST request using mitreidClient to update or create the client
    Function update_data gets 3 arguments:
    - messages, the new incoming messages in json
    - issuer_url, the url of the issuer
    - refresh_token
'''
def update_data(messages, issuer_url, refresh_token, client_id, client_secret, agent_id):
    pub_messages = [] # messages to be published
    for msg in messages:

        log.info('Get access token from ' + issuer_url)
        access_token = refreshTokenGrant(issuer_url, refresh_token, client_id, client_secret)
        mitreid_agent = mitreidClientApi(issuer_url, access_token)

        current_id = msg.pop('id') # Remove rciam service id to make request to mitreId
        format_msg = format_mitreid_msg(msg) # Format message in camelCase for mitreId
        response = {}
        if format_msg['delete'] == True:
            log.info('Delete client with id: ' + str(msg['external_id']))
            response = mitreid_agent.deleteClientById(msg['external_id'])
        elif 'externalId' not in format_msg:  # externalId value should be empty if service is no
            log.info('Create new client')
            response = mitreid_agent.createClient(format_msg)
        else:
            log.info('Update client with id: ' + str(msg['external_id']))
            response = mitreid_agent.updateClientById(msg['external_id'],format_msg)

        if response is None:
            ams_message = format_ams_msg(format_msg,current_id,agent_id,False)
        else:
            ams_message = format_ams_msg(response,current_id,agent_id,True)

        pub_messages.append({'attributes':{},'data':ams_message})
    if len(pub_messages)>0:
        log.info('Publish message to ams for client : ' + str(format_msg['clientId']))
        print(pub_messages)
        ams.publish(pub_messages)

if __name__ == '__main__':
    # Get config path from arguments
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', required=True, type=str, help="Configuration file location path")
    args = parser.parse_args()
    path = args.c
    with open(path) as json_data_file:
        config = json.load(json_data_file)
    get_log_conf(config['log_conf'])

    ams = init_ams_agent(path)
    
    # Get messages
    while True:
        log.info('Pull messages from ams')
        messages = ams.pull(1)
        log.info('Received ' + str(len(messages)) +' messages from ams')
        update_data(messages, config['mitreid_url'], config['mitreid_refresh_token'], config['mitreid_client_id'],config['mitreid_client_secret'], config['agent_id'])
        time.sleep(config['time_interval'])

    log.info('Exit script')